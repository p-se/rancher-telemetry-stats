name: E2E

on:
  workflow_dispatch:
  schedule:
    # Run everyday day at 9:00 AM
    - cron: '0 9 * * *'
  pull_request:
    paths-ignore:
      - 'scripts/**'
      - '*.md'
  push:
    branches:
      - 'release/*"'
      - 'main'
      - 'master'

env:
  GOARCH: amd64
  CGO_ENABLED: 0
  SETUP_GO_VERSION: '^1.19'
  HOST_NAME: telemetry-test  # for `start` script
  CLUSTER_NAME: telemetry-test
  TOKEN: ${{ secrets.TOKEN }}
  # REPO: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
  REPO: telemetry-stats
  REPO_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
  REPOSITORY: ${{ github.repository }}
  BRANCH: ${{ github.ref_name }}
  TELEMETRY_REPO: https://github.com/rancher/telemetry
  TELEMETRY_BRANCH: master

jobs:
  single-cluster:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: telemetry-stats

      - uses: actions/checkout@v3
        with: 
          repository: rancher/telemetry
          path: telemetry
          ref: ${{ env.TELEMETRY_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.SETUP_GO_VERSION }}

      - name: Compile & containerize telemetry
        run: |
          set -x

          # Compile
          cd telemetry
          curl -sL https://releases.rancher.com/dapper/latest/dapper-$(uname -s)-$(uname -m) > /usr/local/bin/dapper
          chmod +x /usr/local/bin/dapper
          dapper

          # Containerize
          docker build -f package/Dockerfile -t rancher/telemetry:${TELEMETRY_BRANCH} .

      - name: Compile Telemetry Stats & build container image
        run: |
          cd telemetry-stats
          set +x
          docker build \
            --build-arg VERSION=dev \
            --build-arg upstream=. \
            .

      - name: Provision k3d Cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          args: >-
            --api-port 6443
            --network "nw01"

      - name: Upload Telemetry Docker image
        run: |
          k3d image import -c ${{ env.CLUSTER_NAME }} rancherlabs/rancher-telemetry-stats:dev

      - name: Upload Telemetry Stats Docker image
        run: |
          k3d image import -c ${{ env.CLUSTER_NAME }} rancher/telemetry:$TELEMETRY_BRANCH

      - name: Install Rancher
        run: |
          set -ex

          echo "working directory: $(pwd)"
          echo "files in working directory: $(find)"

          pip install httpie
          cd telemetry-stats/e2e
          source ./start
          install-rancher

          # Verify
          for i in {0..20}; do
            ip=$(
              kubectl get -A ingress -o json |
                jq -r '.items[0].status.loadBalancer.ingress[0].ip'
            )

            if [[ "${ip}" == "null" ]]; then
              sleep 1
              continue
            fi

            if http --check-status --verify=no GET "https://${ip}" Host:${HOST_NAME} ; then
              >&2 echo "Rancher installation successfully verified"
              exit 0
            fi

            sleep 1
          done

          >&2 echo "Rancher installation test failed"
          exit 1

      - name: Configure Rancher
        run: |
          cd telemetry-stats/e2e && \
            source ./start && \
            CLUSTER_IP=$(get-cluster-ip) && \
            init-base "admin"

      - name: Install PostgreSQL
        run: |
          cd telemetry-stats/e2e && source ./start && install-postgres-13.2

      - name: Install Telemetry Server from $TELEMETRY_BRANCH branch
        run: |
          cd telemetry-stats/e2e && source ./start && install-telemetry-server $TELEMETRY_BRANCH

      - name: Install Telemetry Client from $TELEMETRY_BRANCH branch
        run: |
          cd telemetry-stats/e2e && source ./start && install-telemetry-client $TELEMETRY_BRANCH

      - name: Install InfluxDB
        run: |
          cd telemetry-stats/e2e && source ./start && install-influx

      # - name: Install Telemetry Stats
      #   run: |
      #     cd e2e && source ./start && install-telemetry-stats

      - name: Test report retrieval from PostgreSQL through Telemetry Server
        run: |
          set -x
          ns="${ns:-telemetry}"
          cd telemetry-stats/e2e
          kubectl -n "${ns}" apply --wait -k manifests/tests
          kubectl -n telemetry wait \
            --for=condition=complete \
            --timeout=300s \
            job/test-telemetry-server

      - name: Collect logs
        if: failure()
        run: |
          bash telemetry/k8s/kubectl-dump telemetry

      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: ${{ failure() && github.action }}
        with:
          name: gha-telemetry-dev-e2e-logs-${{ github.sha }}-${{ github.run_id }}
          path: |
            kubectl-dump-*
          retention-days: 2
